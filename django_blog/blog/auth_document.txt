This documentation provides a detailed explanation of the user authentication system developed for the Django blog project. It includes user registration, login, logout, and profile management features, as well as instructions for testing and securing the system.
1. Overview of the Authentication System

The authentication system is built using Django’s built-in user authentication functionalities. The system provides:

    User Registration: Allows users to create accounts with username, email, and password.
    Login and Logout: Enables users to log into their accounts and log out securely.
    Profile Management: Allows authenticated users to view and update their profile information.

2. User Registration
How It Works:

    View: A custom CustomUserCreationForm form is created by extending Django’s UserCreationForm. This form allows users to register with a username, email, and password.
    URL: The registration view is accessible via /register/.
    Template: The register.html template provides the registration form to users.

Code Example:

python

from django.shortcuts import render, redirect
from django.contrib.auth import login
from .forms import CustomUserCreationForm

def register(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)  # Auto login after registration
            return redirect('profile')  # Redirect to profile page after registration
    else:
        form = CustomUserCreationForm()
    return render(request, 'register.html', {'form': form})

Testing:

    Navigate to /register/.
    Fill in the registration form.
    Ensure that after successful registration, the user is logged in and redirected to the profile page.

3. Login and Logout
How It Works:

    Login: Uses Django’s built-in LoginView to handle user login. Accessible via /login/.
    Logout: Uses Django’s LogoutView for logging out users. Accessible via /logout/.
    Templates:
        login.html provides the login form.
        After logging out, users are redirected to a page defined in the settings.

Code Example (URLs):

python

from django.urls import path
from django.contrib.auth import views as auth_views

urlpatterns = [
    path('login/', auth_views.LoginView.as_view(template_name='login.html'), name='login'),
    path('logout/', auth_views.LogoutView.as_view(next_page='/'), name='logout'),
]

Testing:

    Navigate to /login/.
    Enter valid credentials and ensure successful login.
    Log out using the /logout/ URL and confirm that the session ends.

4. Profile Management
How It Works:

    View: A profile view is created to display and allow users to update their information. Only authenticated users can access this view.
    URL: The profile view is accessible via /profile/.
    Template: profile.html provides a form where users can view and edit their details.

Code Example (Profile View):

python

from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from .forms import ProfileForm

@login_required
def profile(request):
    if request.method == 'POST':
        form = ProfileForm(request.POST, instance=request.user)
        if form.is_valid():
            form.save()
            return redirect('profile')
    else:
        form = ProfileForm(instance=request.user)
    return render(request, 'profile.html', {'form': form})

Testing:

    Navigate to /profile/ as an authenticated user.
    Update the profile details (e.g., email) and ensure the changes are saved.

5. Security Measures
CSRF Protection:

    All forms are secured using Django’s CSRF protection. Ensure that {% csrf_token %} is included in all templates that use forms.

Password Handling:

    Django uses secure password hashing (PBKDF2 by default) to store user passwords.

Testing Security:

    Attempt to submit forms without CSRF tokens to ensure that the protection is working.
    Ensure password changes are handled securely by testing with password change forms.

6. Testing Instructions
Manual Testing:

    Registration:
        Access the registration page.
        Create a new user account.
        Verify that the user is registered and redirected to their profile page.

    Login/Logout:
        Access the login page and log in using valid credentials.
        Verify the session is created and the user is redirected.
        Log out and verify that the session ends.

    Profile Management:
        As a logged-in user, access the profile page.
        Update profile details and verify changes are saved.

    Error Handling:
        Try logging in with invalid credentials and check that appropriate error messages are displayed.
        Test registration with mismatching passwords and verify the error feedback.

Automated Tests:

You can create unit tests to verify the functionality of the authentication system.

Example test case:

python

from django.test import TestCase
from django.contrib.auth.models import User

class AuthenticationTest(TestCase):
    def test_user_registration(self):
        response = self.client.post('/register/', {
            'username': 'testuser',
            'email': 'testuser@example.com',
            'password1': 'password123',
            'password2': 'password123'
        })
        self.assertEqual(response.status_code, 302)  # Redirect after success
        self.assertTrue(User.objects.filter(username='testuser').exists())

